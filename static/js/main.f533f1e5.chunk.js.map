{"version":3,"sources":["components/DifficultySelector.tsx","state/actions.ts","model/Game.ts","model/Coordinate.ts","state/selectors.ts","components/Solver.tsx","model/Solver.ts","model/Cell.ts","model/Field.ts","model/Mouse.ts","model/Smiley.ts","components/Cell.tsx","components/Board.tsx","components/ThreeDigitCounter.tsx","components/SmileyButton.tsx","components/Header.tsx","components/Game.tsx","components/App.tsx","state/gameHelpers.ts","state/reducer.ts","state/store.ts","index.jsx"],"names":["changeTypes","setDifficulty","difficulty","action","setSmileyButton","value","onMouseEnter","event","onCellBothClick","x","y","setBotPlays","playsIncrement","DIFFICULTY_OPTIONS","label","config","mines","width","height","getCoordinatesFromKey","key","parts","split","parseInt","getIndexFromCoordinates","w","getDifficulty","state","getGameConfig","getWidth","getTimeCounter","timeCounter","getMinesCounter","minesCounter","getSmileyButton","smileyButton","getMouseLeftElement","mouseLeft","getMouseRightElement","mouseRight","isLeftDown","undefined","isRightDown","isClockRunning","clockRunning","getBotActive","botActive","getBotPlays","botPlays","getBotMoves","botMoves","Solver","useSelector","dispatch","useDispatch","console","log","react_default","a","createElement","type","checked","onChange","onClick","Cell","DificultySelector","_useState3","_useState","useState","Object","defineProperty","_useState2","slicedToArray","inputs","setInputs","selectedDifficulty","handleChange","HEIGHT","target","values","objectSpread2","WIDTH","MINES","className","map","option","classNames","DS_option_active","onSubmit","preventDefault","gameDifficulty","name","components_Solver","isBomb","f","initMineField","cnt","mineFieldSize","mineField","Array","minesArr","i","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArray","m","neighbourMinesCount","getNeighbourIndexes","ni","reduce","acc","cur","concat","MouseKey","isBlank","cell","blank","isNumber","startsWith","isBombFlag","bombflagged","revealBoardOnDeath","oldBoard","deathIndex","newBoard","toConsumableArray","bombdeath","bombrevealed","bombmisflagged","size","neighbourIndexes","isFirstColumn","isLastColumn","isFirstRow","isLastRow","push","revealBoardOnClick","board","field","open1","open2","open3","open4","open5","open6","open7","open8","open0","filter","SmileyButton","getMouseKey","e","nativeEvent","button","LEFT","RIGHT","MIDDLE","CellComponent","_ref","cellStatus","getCellIndex","getCellStatus","leftPressed","isLeftPressed","rightDown","leftDown","neighbourPressed","mouseLeftElement","_getCoordinatesFromKe","_getCoordinatesFromKe2","X","Y","abs","isNeighbourPressed","pressed","onContextMenu","onMouseDown","stopPropagation","onMouseUp","mouseKey","onCellLeftClick","onCellRightClick","onMouseOver","Board","_useSelector","h","border","divs","components_Cell","line","range","getNthDigit","n","pow","ret","ThreeDigitCounter","id","style","backgroundImage","getStyles","margin","marginLeft","marginRight","marginTop","marginBottom","Smiley","smiley","facepressed","facesmile","onMouseOut","ignoreStates","facewin","facedead","includes","Header","intervalRef","useRef","useEffect","current","setInterval","clearInterval","components_ThreeDigitCounter","components_SmileyButton","calcStyle","Game","components_Header","components_Board","App","DifficultySelector","components_Game","handleLeftClickForIndex","index","gameEnded","win","isWin","winBoard","revealBoardOnWin","getInitialState","arguments","fill","mouseMiddle","gameStarted","reducer","createReducer","handleType","payload","faceooh","_getGameConfig","_action$payload","newMineField","_action$payload2","_action$payload3","nextState","newBotMove","_action$payload4","confidence","botMove","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","es","store","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.f533f1e5.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DifficultyOption, DIFFICULTY_OPTIONS } from '../model/Game';\nimport { setDifficulty } from '../state/actions';\nimport { getDifficulty } from '../state/selectors';\nimport './DificultySelector.css';\nimport Solver from './Solver';\n\nconst CUSTOM = \"custom\"\n\nenum changeTypes {\n  HEIGHT,\n  WIDTH,\n  MINES\n}\n\nconst DificultySelector = () => {\n  const [inputs, setInputs] = useState({[\"height\"]: 10, [\"width\"]: 10, [\"mines\"]: 10});\n  const selectedDifficulty = useSelector(getDifficulty);\n  const dispatch = useDispatch();\n\n  const handleChange = (event: any, type: changeTypes) => {\n    if (type === changeTypes.HEIGHT) {\n      const height = event.target.value\n      setInputs(values => ({...values, [\"height\"]: height}))\n    } else if (type === changeTypes.WIDTH) {\n      const width = event.target.value\n      setInputs(values => ({...values, [\"width\"]: width}))\n    } else if (type === changeTypes.MINES) {\n      const mines = event.target.value\n      setInputs(values => ({...values, [\"mines\"]: mines}))\n    }\n  }\n  const handleSubmit = (event: any) => {\n    event.preventDefault()\n    const gameDifficulty: DifficultyOption = {\n      label: CUSTOM,\n      config: {\n        height: inputs.height,\n        width: inputs.width,\n        mines: inputs.mines\n      }\n    }\n    if (inputs.height >= 10 && inputs.width >= 10) dispatch(setDifficulty(gameDifficulty))\n  }\n\n  return (\n      <div>\n        <div className=\"DS_options\">\n        {DIFFICULTY_OPTIONS.map(option => (\n          <button\n            key={option.label}\n            className={classNames('DS_option', { DS_option_active: selectedDifficulty.label === option.label })}\n            onClick={() => {\n              dispatch(setDifficulty(option))\n            }}\n          >\n            {option.label}\n          </button>\n        ))}\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"submit\"\n            value=\"Custom\"\n            key={CUSTOM}\n            className={classNames('DS_option', { DS_option_active: selectedDifficulty.label === CUSTOM })}\n          />\n          <label>Height:\n            <input\n              type=\"number\"\n              name=\"height1\"\n              value={inputs.height}\n              onChange={(event) => handleChange(event, changeTypes.HEIGHT)}\n            />\n          </label>\n          <label>Width:\n            <input\n              type=\"number\"\n              name=\"width1\"\n              value={inputs.width}\n              onChange={(event) => handleChange(event, changeTypes.WIDTH)}\n            />\n          </label>\n          <label>Mines:\n            <input\n              type=\"number\"\n              name=\"mines\"\n              value={inputs.mines}\n              onChange={(event) => handleChange(event, changeTypes.MINES)}\n            />\n          </label>\n        </form>\n      </div>\n      <div className=\"Solver\">\n        <Solver />\n      </div>\n    </div>\n  );\n}\nexport default DificultySelector;\n","import { action } from \"typesafe-actions\";\nimport { DifficultyOption } from \"../model/Game\";\nimport { MouseClickEvent } from \"../model/Mouse\";\nimport { SmileyButton } from \"../model/Smiley\";\n\nexport const SET_DIFFICULTY = 'SET_DIFFICULTY';\nexport const setDifficulty = (difficulty: DifficultyOption) => action(SET_DIFFICULTY, difficulty);\nexport const SET_MINES_COUNTER = 'SET_MINES_COUNTER';\nexport const setMinesCounter = (value: number) => action(SET_MINES_COUNTER, value);\nexport const SET_TIME_COUNTER = 'SET_TIME_COUNTER';\nexport const setTimeCounter = (value: number) => action(SET_TIME_COUNTER, value);\nexport const SET_SMILEY_BUTTON = 'SET_SMILEY_BUTTON';\nexport const setSmileyButton = (value: SmileyButton) => action(SET_SMILEY_BUTTON, value);\n\n\nexport const ON_MOUSE_DOWN = 'ON_MOUSE_DOWN';\nexport const onMouseDown = (event: MouseClickEvent) => action(ON_MOUSE_DOWN, event);\nexport const ON_MOUSE_UP = 'ON_MOUSE_UP';\nexport const onMouseUp = (event: MouseClickEvent) => action(ON_MOUSE_UP, event);\nexport const ON_MOUSE_ENTER = 'ON_MOUSE_ENTER';\nexport const onMouseEnter = (event: MouseClickEvent) => action(ON_MOUSE_ENTER, event);\n\nexport const CLOCK_TICK = 'CLOCK_TICK';\nexport const clockTick = () => action(CLOCK_TICK);\n\nexport const CELL_LEFT_CLICK = 'CELL_LEFT_CLICK';\nexport const onCellLeftClick = (x: number, y: number) => action(CELL_LEFT_CLICK, { x, y });\nexport const CELL_RIGHT_CLICK = 'CELL_RIGHT_CLICK';\nexport const onCellRightClick = (x: number, y: number) => action(CELL_RIGHT_CLICK, { x, y });\nexport const CELL_BOTH_CLICK = 'CELL_BOTH_CLICK';\nexport const onCellBothClick = (x: number, y: number) => action(CELL_BOTH_CLICK, { x, y });\n\nexport const SMILEY_CLICK = 'SMILEY_CLICK';\nexport const onSmileyClick = () => action(SMILEY_CLICK);\n\nexport const SET_BOT_ACTIVE = 'SET_BOT_ACTIVE'\nexport const setBotActive = () => action(SET_BOT_ACTIVE)\nexport const SET_BOT_PLAYS = 'SET_BOT_PLAYS'\nexport const setBotPlays = (playsIncrement: number) => action(SET_BOT_PLAYS, playsIncrement)\nexport const SET_BOT_MOVES = 'SET_BOT_MOVES'\nexport const setBotMoves = (index: number, confidence: number) => action(SET_BOT_MOVES, { index, confidence })\n","export type GameConfig = {\n  width: number;\n  height: number;\n  mines: number;\n};\n\nexport type DifficultyOption = {\n  label: string,\n  config: GameConfig;\n};\n\nexport const DIFFICULTY_OPTIONS: DifficultyOption[] = [\n  {\n    label: 'easy',\n    config: {\n      mines: 10,\n      width: 9,\n      height: 9,\n    },\n  },\n  {\n    label: 'intermediate',\n    config: {\n      mines: 40,\n      width: 16,\n      height: 16,\n    },\n  },\n  {\n    label: 'expert',\n    config: {\n      mines: 99,\n      width: 30,\n      height: 16,\n    },\n  }\n];\n","export type Coordinate = {\n  x: number,\n  y: number,\n};\n\nexport const getCoordinatesFromKey = (key: string) => {\n  const parts = key.split('_');\n  return {\n    x: parseInt(parts[0], 10),\n    y: parseInt(parts[1], 10),\n  };\n}\n\nexport const getIndexFromCoordinates = (x: number, y: number, w: number) => y * w + x;\n","import { getCoordinatesFromKey } from \"../model/Coordinate\";\nimport { RootState } from \"./store\";\n\nexport const getDifficulty = (state: RootState) => state.difficulty;\nexport const getGameConfig = (state: RootState) => state.difficulty.config;\nexport const getWidth = (state: RootState) => getGameConfig(state).width;\n\nexport const getTimeCounter = (state: RootState) => state.timeCounter;\nexport const getMinesCounter = (state: RootState) => state.minesCounter;\nexport const getSmileyButton = (state: RootState) => state.smileyButton;\n\nconst getCellIndex = (x: number, y: number, w: number) => y * w + x;\nexport const getCellStatus = (x: number, y: number) =>\n  (state: RootState) => state.board[getCellIndex(x, y, getWidth(state))];\n\nconst getMouseLeftElement = (state: RootState) => state.mouseLeft;\nconst getMouseRightElement = (state: RootState) => state.mouseRight;\nexport const isLeftPressed = (key: string) => (state: RootState) => getMouseLeftElement(state) === key;\nexport const isRightPressed = (key: string) => (state: RootState) => getMouseRightElement(state) === key;\nexport const isLeftDown = (state: RootState) => getMouseLeftElement(state) !== undefined;\nexport const isRightDown = (state: RootState) => getMouseRightElement(state) !== undefined;\nexport const isNeighbourPressed = (key: string) => (state: RootState) => {\n  const mouseLeftElement = getMouseRightElement(state);\n  if (!mouseLeftElement) {\n    return false;\n  }\n  const { x, y } = getCoordinatesFromKey(key);\n  const { x: X, y: Y } = getCoordinatesFromKey(mouseLeftElement);\n  return Math.abs(x - X) <= 1 && Math.abs(y - Y) <= 1;\n};\n\nexport const isClockRunning = (state: RootState) => state.clockRunning;\n\nexport const getBotActive = (state: RootState) => state.botActive\nexport const getBotPlays = (state: RootState) => state.botPlays\nexport const getBotMoves = (state: RootState) => state.botMoves\n","import React from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { playOneMove } from \"../model/Solver\";\nimport { setBotActive, setBotPlays } from \"../state/actions\";\nimport { getBotActive, getBotPlays, getBotMoves /*, getDifficulty*/ } from \"../state/selectors\";\n\nconst RUN_BOT = \"Run bot?\"\n\nconst Solver = () => {\n    const botActive = useSelector(getBotActive)\n    const botPlays = useSelector(getBotPlays)\n    const botMoves = useSelector(getBotMoves)\n    // const selectedDifficulty = useSelector(getDifficulty)\n    const dispatch = useDispatch()\n    const handleCheckboxChange = () => {\n        dispatch(setBotActive())\n    }\n    // const handleMaxPlaysClick = () => {\n    //     const { height, width, mines } = selectedDifficulty.config\n    //     dispatch(setBotPlays((height * width) - mines))\n    //     dispatch(setBotPlays(1))\n    // }\n\n    if (botPlays > 0) {\n        playOneMove(botMoves)\n        dispatch(setBotPlays(-1))\n    }\n\n    return (\n        <div>\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={botActive}\n                    onChange={handleCheckboxChange}\n                />\n                {RUN_BOT}\n            </label>\n            <button \n                key=\"increase\"\n                onClick={() => {dispatch(setBotPlays(1))}}\n            >\n                Increase   \n            </button>\n            <button\n                key=\"decrease\"\n                onClick={() => {dispatch(setBotPlays(-1))}}\n            >\n                Decrease\n            </button>\n            {/* <button\n                key=\"max_plays\"\n                onClick={handleMaxPlaysClick}\n            >\n                Max Plays\n            </button> */}\n            <label>\n                Bot Plays: {botPlays}\n            </label>\n        </div>\n    )\n}\n\nexport default Solver\n","\nexport const playOneMove = (botMoves: any) => {\n    console.log(\"asdf\")\n}\n\n// TODO: implement helper functions for bot","import { Field, isBomb, isNumber as isFieldNumber } from \"./Field\";\n\nexport enum Cell {\n  blank = 'blank',\n  pressed = 'pressed',\n  bombflagged = 'bombflagged',\n  bombrevealed = 'bombrevealed',\n  bombmisflagged = 'bombmisflagged',\n  bombdeath = 'bombdeath',\n  open0 = 'open0',\n  open1 = 'open1',\n  open2 = 'open2',\n  open3 = 'open3',\n  open4 = 'open4',\n  open5 = 'open5',\n  open6 = 'open6',\n  open7 = 'open7',\n  open8 = 'open8',\n};\n\nexport const isBlank = (cell: Cell): boolean => cell === Cell.blank;\nexport const isOpen = (cell: Cell): boolean => !isBlank(cell);\nexport const isNumber = (cell: Cell): boolean => cell.startsWith('open');\nexport const isBombFlag = (cell: Cell): boolean => cell === Cell.bombflagged;\n\nexport const initBoard = (w: number, h: number) => Array(w * h).fill(Cell.blank)\n\nexport const revealBoardOnDeath = (oldBoard: Cell[], mineField: Field[], deathIndex: number): Cell[] => {\n  const newBoard = [...oldBoard];\n  for (let i = 0; i < oldBoard.length; ++ i) {\n    const cell = oldBoard[i];\n    const f = mineField[i];\n    if (isNumber(cell)) {\n      continue;\n    }\n    if (isBlank(cell)) {\n      if (isBomb(f)) {\n        newBoard[i] = deathIndex === i ? Cell.bombdeath : Cell.bombrevealed;\n      }\n    }\n    if (isBombFlag(cell)) {\n      newBoard[i] = isBomb(f) ? Cell.bombflagged : Cell.bombmisflagged;\n    }\n  }\n  return newBoard;\n}\n\nexport const revealBoardOnWin = (oldBoard: Cell[], mineField: Field[]): Cell[] => {\n  const newBoard = [...oldBoard]\n  for (let i = 0; i < oldBoard.length; ++ i) {\n    const cell = oldBoard[i]\n    const f = mineField[i]\n    if (isNumber(cell)) {\n      continue\n    }\n    if (isBlank(cell)) {\n      if (isBomb(f)) {\n        newBoard[i] = Cell.bombflagged\n      }\n    }\n  }\n  return newBoard\n}\n\nexport const getNeighbourIndexes = (i: number, w: number, size: number): Array<number> => {\n  const neighbourIndexes = [];\n  const isFirstColumn = i % w === 0;\n  const isLastColumn = i % w === w - 1;\n  const isFirstRow = i < w;\n  const isLastRow = i + w >= size;\n  if (!isFirstColumn) neighbourIndexes.push(i - 1);\n  if (!isLastColumn) neighbourIndexes.push(i + 1);\n  if (!isFirstRow) {\n    neighbourIndexes.push(i - w);\n    if (!isFirstColumn) neighbourIndexes.push(i - w - 1);\n    if (!isLastColumn) neighbourIndexes.push(i - w + 1);\n  }\n  if (!isLastRow) {\n    neighbourIndexes.push(i + w);\n    if (!isFirstColumn) neighbourIndexes.push(i + w - 1);\n    if (!isLastColumn) neighbourIndexes.push(i + w + 1);\n  }\n  return neighbourIndexes;\n}\n\nexport const revealBoardOnClick = (board: Cell[], mineField: Field[], i: number, w: number) => {\n  let newBoard = [...board];\n  const field = mineField[i];\n  if (field === '1') { newBoard[i] = Cell.open1; return newBoard; }\n  if (field === '2') { newBoard[i] = Cell.open2; return newBoard; }\n  if (field === '3') { newBoard[i] = Cell.open3; return newBoard; }\n  if (field === '4') { newBoard[i] = Cell.open4; return newBoard; }\n  if (field === '5') { newBoard[i] = Cell.open5; return newBoard; }\n  if (field === '6') { newBoard[i] = Cell.open6; return newBoard; }\n  if (field === '7') { newBoard[i] = Cell.open7; return newBoard; }\n  if (field === '8') { newBoard[i] = Cell.open8; return newBoard; }\n  if (field === '0') {\n    newBoard[i] = Cell.open0;\n    const neighbourIndexes = getNeighbourIndexes(i, w, board.length)\n      .filter(ni => isBlank(board[ni]) && isFieldNumber(mineField[ni]));\n    for (let i = 0; i < neighbourIndexes.length; ++i) {\n      newBoard = revealBoardOnClick(newBoard, mineField, neighbourIndexes[i], w);\n    }\n  }\n  return newBoard;\n}\n\nexport const isWin = (board: Cell[], mineField: Field[]) => {\n  for (let i = 0; i < board.length; ++i) {\n    const cell = board[i];\n    const field = mineField[i];\n    if ((isBlank(cell) && !isBomb(field)) || (isBombFlag(cell) && !isBomb(field))) {\n      return false;\n    }\n  }\n  return true;\n};\n","import { getNeighbourIndexes } from \"./Cell\";\nimport { getIndexFromCoordinates } from \"./Coordinate\";\n\nexport type Field = 'X' | 'x' | '0' | '1'  | '2'  | '3'  | '4'  | '5'  | '6'  | '7'  | '8';\n\nexport const isNumber = (f: Field) => f !== 'x' && f !== 'X';\nexport const isBomb = (f: Field) => f === 'x';\n\n\nconst shuffleArray = (array : Field[]) => {\n  var currentIndex = array.length, temporaryValue, randomIndex ;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nexport const initMineField = (width: number, height: number, x: number, y: number, cnt: number) => {\n  const mineFieldSize = width * height;\n  let mineField = Array(mineFieldSize);\n\n  mineField[getIndexFromCoordinates(x, y, width)] = 'X';\n  var minesArr = new Array(mineFieldSize - 1);\n  for (let i = 0; i < cnt; i++){\n    minesArr[i] = 'x';\n  }\n  minesArr = shuffleArray(minesArr);\n\n  for (let i = 0, m = 0; i < mineFieldSize; i++) {\n    if (mineField[i] !== 'X') {\n      mineField[i] = minesArr[m++];\n    }\n  }\n\n  for (let i = 0; i < mineFieldSize; ++i) {\n    if (mineField[i] !== 'x') {\n      const neighbourIndexes = getNeighbourIndexes(i, width, mineFieldSize);\n      const neighbourMines = neighbourIndexes.map(ni => mineField[ni] === 'x' ? 1 : 0);\n      const neighbourMinesCount = neighbourMines.reduce((acc: number, cur) => (acc + cur), 0);\n      mineField[i] = `${neighbourMinesCount}`;\n    }\n  }\n\n  return mineField;\n};\n","export enum MouseKey {\n  LEFT,\n  RIGHT,\n  MIDDLE,\n}\n\nexport interface MouseClickEvent {\n  key?: MouseKey;\n  target: string,\n}\n\nexport const getMouseKey = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n  if (e.nativeEvent.button === 0) {\n    return MouseKey.LEFT;\n  }\n  if (e.nativeEvent.button === 2) {\n    return MouseKey.RIGHT;\n  }\n  return MouseKey.MIDDLE\n};","export enum SmileyButton {\n  facesmile = 'facesmile',\n  facepressed = 'facepressed',\n  facewin = 'facewin',\n  facedead = 'facedead',\n  faceooh = 'faceooh',\n};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Cell } from '../model/Cell';\nimport { getMouseKey, MouseKey } from '../model/Mouse';\nimport { onCellBothClick, onCellLeftClick, onCellRightClick, onMouseDown, onMouseEnter, onMouseUp } from '../state/actions';\nimport { getCellStatus, isLeftDown, isLeftPressed, isNeighbourPressed, isRightDown } from '../state/selectors';\n\ninterface props {\n  x: number;\n  y: number;\n}\n\nconst CellComponent = ({ x, y } : props) => {\n  const key = `${x}_${y}`;\n  const dispatch = useDispatch();\n  let cellStatus = useSelector(getCellStatus(x, y));\n  const leftPressed = useSelector(isLeftPressed(key));\n  const rightDown = useSelector(isRightDown);\n  const leftDown = useSelector(isLeftDown);\n  const neighbourPressed = useSelector(isNeighbourPressed(key))\n  if (cellStatus === Cell.blank) {\n    if (leftPressed || (leftDown && rightDown && neighbourPressed)) {\n      cellStatus = Cell.pressed;\n    }\n  }\n  return (\n    <div\n      key={key}\n      className={`square ${cellStatus}`}\n      onContextMenu={e => {e.preventDefault();}}\n      onMouseDown={(e) => {\n        dispatch(onMouseDown({ key: getMouseKey(e), target: key }));\n        e.stopPropagation();\n      }}\n      onMouseUp={(e) => {\n        const mouseKey = getMouseKey(e);\n        dispatch(onMouseUp({ key: mouseKey, target: key }));\n        if (mouseKey === MouseKey.LEFT) {\n          if (rightDown) {\n            dispatch(onCellBothClick(x, y))\n          } else {\n            dispatch(onCellLeftClick(x, y));\n          }\n        } else if (mouseKey === MouseKey.RIGHT) {\n          if (leftDown) {\n            dispatch(onCellBothClick(x, y))\n          } else {\n            dispatch(onCellRightClick(x, y));\n          }\n        }\n        e.stopPropagation();\n      } }\n      onMouseOver={(e) => {\n        dispatch(onMouseEnter({ target: key }));\n        e.stopPropagation();\n      }}\n    />\n  ); \n}\nexport default CellComponent;\n","import { range } from 'lodash';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGameConfig } from '../state/selectors';\nimport Cell from './Cell';\n\nconst Board = () => {\n  const { height: h, width: w } = useSelector(getGameConfig);\n  const border =  (key: string) => (<div key={key} className=\"borderlr\" />);\n  var divs = [];\n  for (var y = 0; y < h; ++y) {\n    divs.push(border(`${y}-l`));\n    for (var x = 0; x < w; ++x){\n      divs.push(\n        <Cell\n          key={`${y}-${x}`}\n          x={x}\n          y={y}\n        />\n      );\n    }\n    divs.push(border(`${y}-r`));\n  }\n  const line = range(w).map(i => <div key={i} className=\"bordertb\" />);\n  return (\n    <div className=\"minesweeper-board\" >\n      {divs}\n      <div className=\"borderbl\" />{line}<div className=\"borderbr\" />\t\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\n\ninterface props {\n\tid: string;\n\tvalue: number,\n};\n\nconst getNthDigit = (value: number, n: number) => {\n  if (n === 1 && value < 0){\n    return \"-\";\n  }\n  var pow = Math.pow(10, 3 - n);\n  var ret = Math.floor((Math.abs(value) / pow) % 10);\n  return Math.abs(ret);\n}\n\nconst ThreeDigitCounter = ({ id, value } : props) => (\n\t<div style={{'backgroundImage':'none'}}>\n\t\t<div className={`time${getNthDigit(value, 1)}`} id={id+\"_hundreds\"} />\n\t\t<div className={`time${getNthDigit(value, 2)}`} id={id+\"_tens\"} />\n\t\t<div className={`time${getNthDigit(value, 3)}`} id={id+\"_ones\"} />\n\t</div>\n);\n\nexport default ThreeDigitCounter;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGameConfig, getSmileyButton } from '../state/selectors';\nimport { onSmileyClick, setSmileyButton } from '../state/actions';\nimport { includes } from 'lodash';\nimport { GameConfig } from '../model/Game';\nimport { SmileyButton } from '../model/Smiley';\n\nconst getStyles = (config: GameConfig) => {\n  const w = config.width;\n  const margin = (w * 16 - 90 - 26) / 2;\n  return {\n    \"marginLeft\": `${margin}px`,\n    \"marginRight\": `${margin}px`,\n    \"marginTop\": \"3px\",\n    \"marginBottom\": \"3px\"\n  };\n}\n\nconst Smiley = () => {\n  const config = useSelector(getGameConfig);\n  const smiley = useSelector(getSmileyButton);\n  const dispatch = useDispatch();\n  return (\n    <div style={{'backgroundImage':'none'}}>\n      <div id=\"smiley\"\n        className={smiley} style={getStyles(config)}\n        onMouseDown={() => {\n          dispatch(setSmileyButton(SmileyButton.facepressed));\n        }}\n        onMouseUp={() => {\n          if (smiley === SmileyButton.facepressed){\n            dispatch(onSmileyClick());\n            dispatch(setSmileyButton(SmileyButton.facesmile));\n          }\n        }}\n        onMouseOut={() => {\n          const ignoreStates = [SmileyButton.facewin, SmileyButton.facedead, SmileyButton.facesmile];\n          if (!includes(ignoreStates, smiley)) {\n            dispatch(setSmileyButton(SmileyButton.facesmile));\n          }\n        }}\n      />\n    </div>\n  );\n}\nexport default Smiley;\n","import React, { useEffect, useRef } from 'react';\nimport { range } from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGameConfig, getMinesCounter, getTimeCounter, isClockRunning } from '../state/selectors';\nimport ThreeDigitCounter from './ThreeDigitCounter';\nimport SmileyButton from './SmileyButton';\nimport { clockTick } from '../state/actions';\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const config = useSelector(getGameConfig);\n  const minesCounter = useSelector(getMinesCounter);\n  const timeCounter = useSelector(getTimeCounter);\n  const clockRunning = useSelector(isClockRunning);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  useEffect(() => {\n    if (clockRunning) {\n      intervalRef.current = setInterval(() => { dispatch(clockTick()); }, 1000);\n    } else  if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n  }, [clockRunning, dispatch])\n  const line = range(config.width).map(key => <div key={key} className=\"bordertb\" />);\n  return (\n    <div className=\"msw-header\">\n      <div className=\"bordertl\" />{line}<div className=\"bordertr\" />\n      <div className=\"borderlrlong\"/>\n      <ThreeDigitCounter value={minesCounter} id=\"mines\" />\n      <SmileyButton />\n      <ThreeDigitCounter value={timeCounter} id=\"seconds\"/>\n      <div className=\"borderlrlong\"/>\n      <div className=\"borderjointl\" />{line}<div className=\"borderjointr\" />\n    </div>\n  );\n}\nexport default Header;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { GameConfig } from '../model/Game';\nimport { getGameConfig } from '../state/selectors';\nimport Board from './Board';\nimport Header from './Header';\n\nconst BORDER_WIDTH = 10;\nconst BORDER_HEIGHT = 10;\nconst FIELD_WIDTH = 16;\nconst FIELD_HEIGHT = 16;\nconst HEADER_HEIGHT = 32;\n\nconst calcStyle = (config: GameConfig) => {\n  const widthFieldsNum = config.width;\n  const heightFieldsNum = config.height;\n  const width = 2 * BORDER_WIDTH + widthFieldsNum * FIELD_WIDTH;\n  const height = 3 * BORDER_HEIGHT + FIELD_HEIGHT * heightFieldsNum + HEADER_HEIGHT;\n  return { width, height };\n}\n\nconst Game = () => {\n  const config = useSelector(getGameConfig);\n  return (\n    <div id=\"game\" className=\"msw\" style={calcStyle(config)}>\n      <Header />\n      <Board />\t\t\t\t\t\t\n    </div>\n  );\n}\nexport default Game;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { onMouseEnter } from '../state/actions';\nimport DificultySelector from './DifficultySelector';\nimport Game from './Game';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  return (\n    <div\n      className=\"APP z100\"\n      onMouseOver={(e) => dispatch(onMouseEnter({ target: 'APP' }))}\n    >\n      <DificultySelector />\n      <Game />\n    </div>\n  );\n}\nexport default App;\n","import { PayloadAction } from \"typesafe-actions\";\nimport { Cell, getNeighbourIndexes, isBlank, isBombFlag, isNumber, isWin, revealBoardOnClick, revealBoardOnDeath, revealBoardOnWin } from \"../model/Cell\";\nimport { Coordinate, getIndexFromCoordinates } from \"../model/Coordinate\";\nimport { initMineField, isBomb } from \"../model/Field\";\nimport { SmileyButton } from \"../model/Smiley\";\nimport { getGameConfig, getWidth } from \"./selectors\";\nimport { RootState } from \"./store\";\n\nconst handleLeftClickForIndex = (state: RootState, index: number) => {\n  const { board, mineField } = state;\n  const w = getWidth(state);\n  const cell = board[index];\n  if (!mineField || !isBlank(cell)) {\n    return state;\n  }\n  const field = mineField[index];\n  if (isBomb(field)) {\n    return ({\n      ...state,\n      clockRunning: false,\n      gameEnded: true,\n      board: revealBoardOnDeath(board, mineField, index),\n      smileyButton: SmileyButton.facedead,\n    });\n  }\n  const newBoard = revealBoardOnClick(board, mineField, index, w);\n  const win = isWin(newBoard, mineField);\n  const winBoard = revealBoardOnWin(newBoard, mineField)\n  return ({\n    ...state,\n    board: win ? winBoard : newBoard,\n    gameEnded: win,\n    clockRunning: !win,\n    smileyButton: win ? SmileyButton.facewin : SmileyButton.facesmile,\n  });\n}\n\nexport const handleLeftClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { gameEnded, gameStarted, board } = state;\n  const {\n    width: w,\n    height: h,\n    mines,\n  } = getGameConfig(state);\n  if (gameEnded) {\n    return state;\n  }\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  if (!gameStarted) {\n    const newMineField = initMineField(w, h, x, y, mines);\n    const newBoard = revealBoardOnClick(board, newMineField, index, w);\n    return ({\n      ...state,\n      gameStarted: true,\n      mineField: newMineField,\n      clockRunning: true,\n      board: newBoard,\n    })\n  }\n  return handleLeftClickForIndex(state, index);\n};\n\nexport const handleRightClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { board, minesCounter, gameEnded } = state;\n  if (gameEnded) {\n    return state;\n  }\n  const {\n    width: w,\n   } = getGameConfig(state);\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  const cell = board[index];\n  if (isBlank(cell)) {\n    const newBoard = [...board];\n    newBoard[index] = Cell.bombflagged;\n    return ({\n      ...state,\n      board: newBoard,\n      minesCounter: minesCounter - 1,\n    });\n  }\n  if (isBombFlag(cell)) {\n    const newBoard = [...board];\n    newBoard[index] = Cell.blank;\n    return ({\n      ...state,\n      board: newBoard,\n      minesCounter: minesCounter + 1,\n    });\n  }\n  return state;\n};\n\nexport const handleBothClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { board, mineField, gameEnded } = state;\n  if (gameEnded) {\n    return state;\n  }\n  const {\n    width: w,\n   } = getGameConfig(state);\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  const cell = board[index];\n  if (!mineField) {\n    return state;\n  }\n  if (isNumber(cell)) {\n    const neighbourIndexes = getNeighbourIndexes(index, w, board.length);\n    let nextState = {...state};\n    for (let i = 0; i < neighbourIndexes.length; ++i) {\n      const ni = neighbourIndexes[i];\n      nextState = handleLeftClickForIndex(nextState, ni);\n    }\n    return nextState;\n  }\n  return state;\n};\n\ntype botMovesType = {\n  index: number,\n  confidence: number\n}\nexport const updateMoves = (state: RootState, action: PayloadAction<string, botMovesType>) => {\n  let newBotMove = state.botMoves\n  const { index, confidence } = action.payload\n  newBotMove[index] = confidence\n  return ({\n    ...state,\n    botMove: newBotMove\n  })\n}\n","import { createReducer, PayloadAction } from 'typesafe-actions';\nimport { initBoard } from '../model/Cell';\nimport { DifficultyOption, DIFFICULTY_OPTIONS } from '../model/Game';\nimport { MouseKey, MouseClickEvent } from '../model/Mouse';\nimport { SmileyButton } from '../model/Smiley';\nimport {\n  SET_DIFFICULTY,\n  SET_MINES_COUNTER,\n  SET_TIME_COUNTER,\n  SET_SMILEY_BUTTON,\n  ON_MOUSE_DOWN,\n  ON_MOUSE_UP,\n  ON_MOUSE_ENTER,\n  CLOCK_TICK,\n  CELL_LEFT_CLICK,\n  CELL_RIGHT_CLICK,\n  SMILEY_CLICK,\n  CELL_BOTH_CLICK,\n  SET_BOT_ACTIVE,\n  SET_BOT_PLAYS,\n  SET_BOT_MOVES,\n} from './actions';\nimport { handleBothClick, handleLeftClick, handleRightClick, updateMoves } from './gameHelpers';\nimport { RootState } from './store';\n\nconst getInitialState = (difficulty = DIFFICULTY_OPTIONS[2]) => ({\n  difficulty,\n  minesCounter: difficulty.config.mines,\n  timeCounter: 0,\n  smileyButton: SmileyButton.facesmile,\n  board: initBoard(difficulty.config.width, difficulty.config.height),\n  mineField: undefined,\n  mouseLeft: undefined,\n  mouseMiddle: undefined,\n  mouseRight: undefined,\n  clockRunning: false,\n  gameStarted: false,\n  gameEnded: false,\n  botActive: false,\n  botPlays: 0,\n  botMoves: {}\n});\n\nconst reducer = createReducer<RootState>(getInitialState())\n  .handleType(SET_DIFFICULTY, (state: RootState, action: PayloadAction<string, DifficultyOption>) => (\n    getInitialState(action.payload)\n  ))\n  .handleType(SET_MINES_COUNTER, (state: RootState, action: PayloadAction<string, number>) => ({\n    ...state,\n    minesCounter: action.payload, \n  }))\n  .handleType(SET_TIME_COUNTER, (state: RootState, action: PayloadAction<string, number>) => ({\n    ...state,\n    timeCounter: action.payload, \n  }))\n  .handleType(SET_SMILEY_BUTTON, (state: RootState, action: PayloadAction<string, SmileyButton>) => ({\n    ...state,\n    smileyButton: action.payload, \n  }))\n  .handleType(ON_MOUSE_DOWN, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.gameEnded) return state;\n    if (action.payload.key === MouseKey.LEFT) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n        smileyButton: SmileyButton.faceooh,\n      });\n    }\n    if (action.payload.key === MouseKey.MIDDLE) {\n      return ({\n        ...state,\n        mouseMiddle: action.payload.target,\n        smileyButton: SmileyButton.faceooh,\n      });\n    }\n    if (action.payload.key === MouseKey.RIGHT) {\n      return ({\n        ...state,\n        mouseRight: action.payload.target,\n      });\n    }\n    return state;\n  })\n  .handleType(ON_MOUSE_UP, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.gameEnded) return state;\n    if (action.payload.key === MouseKey.LEFT) {\n      return ({\n        ...state,\n        mouseLeft: undefined,\n        smileyButton: state.mouseRight ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    if (action.payload.key === MouseKey.MIDDLE) {\n      return ({\n        ...state,\n        mouseMiddle: undefined,\n        smileyButton: (state.mouseRight || state.mouseLeft) ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    if (action.payload.key === MouseKey.RIGHT) {\n      return ({\n        ...state,\n        mouseRight: undefined,\n        smileyButton: state.mouseLeft ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    return state;\n  })\n  .handleType(ON_MOUSE_ENTER, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.mouseLeft !== undefined && state.mouseRight !== undefined) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n        mouseRight: action.payload.target,\n      });\n    }\n    if (state.mouseLeft !== undefined) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n      });\n    }\n    if (state.mouseMiddle !== undefined) {\n      return ({\n        ...state,\n        mouseMiddle: action.payload.target,\n      });\n    }\n    if (state.mouseRight !== undefined) {\n      return ({\n        ...state,\n        mouseRight: action.payload.target,\n      });\n    }\n    return state;\n  })\n  .handleType(CELL_LEFT_CLICK, handleLeftClick)\n  .handleType(CELL_RIGHT_CLICK, handleRightClick)\n  .handleType(CELL_BOTH_CLICK, handleBothClick)\n  .handleType(SMILEY_CLICK, (state: RootState) => (\n    getInitialState(state.difficulty)\n  ))\n  .handleType(CLOCK_TICK, (state: RootState) => ({\n    ...state,\n    timeCounter: state.timeCounter + 1,\n  }))\n  .handleType(SET_BOT_ACTIVE, (state: RootState) => ({\n    ...state,\n    botActive: !state.botActive,\n    botPlays: 0\n  }))\n  .handleType(SET_BOT_PLAYS, (state: RootState, action: PayloadAction<string, number>) => ({\n    ...state,\n    botPlays: (state.botPlays + action.payload >= 0) && state.botActive ? state.botPlays + action.payload : 0\n  }))\n  .handleType(SET_BOT_MOVES, updateMoves)\n\n  \nexport default reducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Cell } from '../model/Cell';\nimport { Field } from '../model/Field';\nimport { DifficultyOption } from '../model/Game';\nimport { SmileyButton } from '../model/Smiley';\nimport reducer from './reducer';\n\n\nexport type RootState = {\n  difficulty: DifficultyOption,\n  minesCounter: number,\n  timeCounter: number,\n  smileyButton: SmileyButton,\n  board: Cell[],\n  mineField: Field[] | undefined,\n  mouseLeft: string | undefined,\n  mouseMiddle: string | undefined,\n  mouseRight: string | undefined,\n  clockRunning: boolean,\n  gameStarted: boolean,\n  gameEnded: boolean,\n  botActive: boolean,\n  botPlays: number,\n  botMoves: {[key: number]: number} // key is index\n};\n\nexport default createStore(reducer, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './state/store';\nimport './css/minesweeper.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div className=\"Screen\">\n        <App />\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}