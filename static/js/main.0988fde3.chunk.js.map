{"version":3,"sources":["components/DifficultySelector.tsx","state/actions.ts","model/Game.ts","model/Coordinate.ts","state/selectors.ts","model/Cell.ts","model/Field.ts","model/Mouse.ts","model/Smiley.ts","components/Cell.tsx","components/Board.tsx","components/ThreeDigitCounter.tsx","components/SmileyButton.tsx","components/Header.tsx","components/Game.tsx","components/App.tsx","state/gameHelpers.ts","state/reducer.ts","state/store.ts","index.jsx"],"names":["changeTypes","setDifficulty","difficulty","action","setSmileyButton","value","onMouseEnter","event","onCellBothClick","x","y","DIFFICULTY_OPTIONS","label","config","mines","width","height","getCoordinatesFromKey","key","parts","split","parseInt","getIndexFromCoordinates","w","getDifficulty","state","getGameConfig","getWidth","getTimeCounter","timeCounter","getMinesCounter","minesCounter","getSmileyButton","smileyButton","getMouseLeftElement","mouseLeft","getMouseRightElement","mouseRight","isLeftDown","undefined","isRightDown","isClockRunning","clockRunning","Cell","DificultySelector","_useState3","_useState","useState","Object","defineProperty","_useState2","slicedToArray","inputs","setInputs","selectedDifficulty","useSelector","dispatch","useDispatch","handleChange","type","HEIGHT","target","values","objectSpread2","WIDTH","MINES","react_default","a","createElement","className","map","option","classNames","DS_option_active","onClick","onSubmit","preventDefault","gameDifficulty","name","onChange","isBomb","f","initMineField","cnt","mineFieldSize","mineField","Array","minesArr","i","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArray","m","neighbourMinesCount","getNeighbourIndexes","ni","reduce","acc","cur","concat","MouseKey","isBlank","cell","blank","isNumber","startsWith","isBombFlag","bombflagged","revealBoardOnDeath","oldBoard","deathIndex","newBoard","toConsumableArray","bombdeath","bombrevealed","bombmisflagged","size","neighbourIndexes","isFirstColumn","isLastColumn","isFirstRow","isLastRow","push","revealBoardOnClick","board","field","open1","open2","open3","open4","open5","open6","open7","open8","open0","filter","SmileyButton","getMouseKey","e","nativeEvent","button","LEFT","RIGHT","MIDDLE","CellComponent","_ref","cellStatus","getCellIndex","getCellStatus","leftPressed","isLeftPressed","rightDown","leftDown","neighbourPressed","mouseLeftElement","_getCoordinatesFromKe","_getCoordinatesFromKe2","X","Y","abs","isNeighbourPressed","pressed","onContextMenu","onMouseDown","stopPropagation","onMouseUp","mouseKey","onCellLeftClick","onCellRightClick","onMouseOver","Board","_useSelector","h","border","divs","components_Cell","line","range","getNthDigit","n","pow","ret","ThreeDigitCounter","id","style","backgroundImage","getStyles","margin","marginLeft","marginRight","marginTop","marginBottom","Smiley","smiley","facepressed","facesmile","onMouseOut","ignoreStates","facewin","facedead","includes","Header","intervalRef","useRef","useEffect","current","setInterval","clearInterval","components_ThreeDigitCounter","components_SmileyButton","calcStyle","Game","components_Header","components_Board","App","DifficultySelector","components_Game","handleLeftClickForIndex","index","gameEnded","win","isWin","winBoard","revealBoardOnWin","getInitialState","arguments","fill","mouseMiddle","gameStarted","reducer","createReducer","handleType","payload","faceooh","_getGameConfig","_action$payload","newMineField","_action$payload2","_action$payload3","nextState","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","es","store","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.0988fde3.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DifficultyOption, DIFFICULTY_OPTIONS } from '../model/Game';\nimport { setDifficulty } from '../state/actions';\nimport { getDifficulty } from '../state/selectors';\nimport './DificultySelector.css';\n\nconst CUSTOM = \"custom\"\n\nenum changeTypes {\n  HEIGHT,\n  WIDTH,\n  MINES\n}\n\nconst DificultySelector = () => {\n  const [inputs, setInputs] = useState({[\"height\"]: 10, [\"width\"]: 10, [\"mines\"]: 10});\n  const selectedDifficulty = useSelector(getDifficulty);\n  const dispatch = useDispatch();\n\n  const handleChange = (event: any, type: changeTypes) => {\n    if (type === changeTypes.HEIGHT) {\n      const height = event.target.value\n      setInputs(values => ({...values, [\"height\"]: height}))\n    } else if (type === changeTypes.WIDTH) {\n      const width = event.target.value\n      setInputs(values => ({...values, [\"width\"]: width}))\n    } else if (type === changeTypes.MINES) {\n      const mines = event.target.value\n      setInputs(values => ({...values, [\"mines\"]: mines}))\n    }\n  }\n  const handleSubmit = (event: any) => {\n    event.preventDefault()\n    const gameDifficulty: DifficultyOption = {\n      label: CUSTOM,\n      config: {\n        height: inputs.height,\n        width: inputs.width,\n        mines: inputs.mines\n      }\n    }\n    if (inputs.height >= 10 && inputs.width >= 10) dispatch(setDifficulty(gameDifficulty))\n  }\n\n  return (\n    <div className=\"DS_options\">\n      {DIFFICULTY_OPTIONS.map(option => (\n        <button\n          key={option.label}\n          className={classNames('DS_option', { DS_option_active: selectedDifficulty.label === option.label })}\n          onClick={() => {\n            dispatch(setDifficulty(option))\n          }}\n        >\n          {option.label}\n        </button>\n      ))}\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"submit\"\n          value=\"Custom\"\n          key={CUSTOM}\n          className={classNames('DS_option', { DS_option_active: selectedDifficulty.label === CUSTOM })}\n        />\n        <label>Height:\n          <input\n            type=\"number\"\n            name=\"height1\"\n            value={inputs.height}\n            onChange={(event) => handleChange(event, changeTypes.HEIGHT)}\n          />\n        </label>\n        <label>Width:\n          <input\n            type=\"number\"\n            name=\"width1\"\n            value={inputs.width}\n            onChange={(event) => handleChange(event, changeTypes.WIDTH)}\n          />\n        </label>\n        <label>Mines:\n          <input\n            type=\"number\"\n            name=\"mines\"\n            value={inputs.mines}\n            onChange={(event) => handleChange(event, changeTypes.MINES)}\n          />\n        </label>\n      </form>\n    </div>\n  );\n}\nexport default DificultySelector;\n","import { action } from \"typesafe-actions\";\nimport { DifficultyOption } from \"../model/Game\";\nimport { MouseClickEvent } from \"../model/Mouse\";\nimport { SmileyButton } from \"../model/Smiley\";\n\nexport const SET_DIFFICULTY = 'SET_DIFFICULTY';\nexport const setDifficulty = (difficulty: DifficultyOption) => action(SET_DIFFICULTY, difficulty);\nexport const SET_MINES_COUNTER = 'SET_MINES_COUNTER';\nexport const setMinesCounter = (value: number) => action(SET_MINES_COUNTER, value);\nexport const SET_TIME_COUNTER = 'SET_TIME_COUNTER';\nexport const setTimeCounter = (value: number) => action(SET_TIME_COUNTER, value);\nexport const SET_SMILEY_BUTTON = 'SET_SMILEY_BUTTON';\nexport const setSmileyButton = (value: SmileyButton) => action(SET_SMILEY_BUTTON, value);\n\n\nexport const ON_MOUSE_DOWN = 'ON_MOUSE_DOWN';\nexport const onMouseDown = (event: MouseClickEvent) => action(ON_MOUSE_DOWN, event);\nexport const ON_MOUSE_UP = 'ON_MOUSE_UP';\nexport const onMouseUp = (event: MouseClickEvent) => action(ON_MOUSE_UP, event);\nexport const ON_MOUSE_ENTER = 'ON_MOUSE_ENTER';\nexport const onMouseEnter = (event: MouseClickEvent) => action(ON_MOUSE_ENTER, event);\n\nexport const CLOCK_TICK = 'CLOCK_TICK';\nexport const clockTick = () => action(CLOCK_TICK);\n\nexport const CELL_LEFT_CLICK = 'CELL_LEFT_CLICK';\nexport const onCellLeftClick = (x: number, y: number) => action(CELL_LEFT_CLICK, { x, y });\nexport const CELL_RIGHT_CLICK = 'CELL_RIGHT_CLICK';\nexport const onCellRightClick = (x: number, y: number) => action(CELL_RIGHT_CLICK, { x, y });\nexport const CELL_BOTH_CLICK = 'CELL_BOTH_CLICK';\nexport const onCellBothClick = (x: number, y: number) => action(CELL_BOTH_CLICK, { x, y });\n\nexport const SMILEY_CLICK = 'SMILEY_CLICK';\nexport const onSmileyClick = () => action(SMILEY_CLICK);\n","export type GameConfig = {\n  width: number;\n  height: number;\n  mines: number;\n};\n\nexport type DifficultyOption = {\n  label: string,\n  config: GameConfig;\n};\n\nexport const DIFFICULTY_OPTIONS: DifficultyOption[] = [\n  {\n    label: 'easy',\n    config: {\n      mines: 10,\n      width: 9,\n      height: 9,\n    },\n  },\n  {\n    label: 'intermediate',\n    config: {\n      mines: 40,\n      width: 16,\n      height: 16,\n    },\n  },\n  {\n    label: 'expert',\n    config: {\n      mines: 99,\n      width: 30,\n      height: 16,\n    },\n  }\n];\n","export type Coordinate = {\n  x: number,\n  y: number,\n};\n\nexport const getCoordinatesFromKey = (key: string) => {\n  const parts = key.split('_');\n  return {\n    x: parseInt(parts[0], 10),\n    y: parseInt(parts[1], 10),\n  };\n}\n\nexport const getIndexFromCoordinates = (x: number, y: number, w: number) => y * w + x;\n","import { getCoordinatesFromKey } from \"../model/Coordinate\";\nimport { RootState } from \"./store\";\n\nexport const getDifficulty = (state: RootState) => state.difficulty;\nexport const getGameConfig = (state: RootState) => state.difficulty.config;\nexport const getWidth = (state: RootState) => getGameConfig(state).width;\n\nexport const getTimeCounter = (state: RootState) => state.timeCounter;\nexport const getMinesCounter = (state: RootState) => state.minesCounter;\nexport const getSmileyButton = (state: RootState) => state.smileyButton;\n\nconst getCellIndex = (x: number, y: number, w: number) => y * w + x;\nexport const getCellStatus = (x: number, y: number) =>\n  (state: RootState) => state.board[getCellIndex(x, y, getWidth(state))];\n\nconst getMouseLeftElement = (state: RootState) => state.mouseLeft;\nconst getMouseRightElement = (state: RootState) => state.mouseRight;\nexport const isLeftPressed = (key: string) => (state: RootState) => getMouseLeftElement(state) === key;\nexport const isRightPressed = (key: string) => (state: RootState) => getMouseRightElement(state) === key;\nexport const isLeftDown = (state: RootState) => getMouseLeftElement(state) !== undefined;\nexport const isRightDown = (state: RootState) => getMouseRightElement(state) !== undefined;\nexport const isNeighbourPressed = (key: string) => (state: RootState) => {\n  const mouseLeftElement = getMouseRightElement(state);\n  if (!mouseLeftElement) {\n    return false;\n  }\n  const { x, y } = getCoordinatesFromKey(key);\n  const { x: X, y: Y } = getCoordinatesFromKey(mouseLeftElement);\n  return Math.abs(x - X) <= 1 && Math.abs(y - Y) <= 1;\n};\n\nexport const isClockRunning = (state: RootState) => state.clockRunning;\n","import { Field, isBomb, isNumber as isFieldNumber } from \"./Field\";\n\nexport enum Cell {\n  blank = 'blank',\n  pressed = 'pressed',\n  bombflagged = 'bombflagged',\n  bombrevealed = 'bombrevealed',\n  bombmisflagged = 'bombmisflagged',\n  bombdeath = 'bombdeath',\n  open0 = 'open0',\n  open1 = 'open1',\n  open2 = 'open2',\n  open3 = 'open3',\n  open4 = 'open4',\n  open5 = 'open5',\n  open6 = 'open6',\n  open7 = 'open7',\n  open8 = 'open8',\n};\n\nexport const isBlank = (cell: Cell): boolean => cell === Cell.blank;\nexport const isOpen = (cell: Cell): boolean => !isBlank(cell);\nexport const isNumber = (cell: Cell): boolean => cell.startsWith('open');\nexport const isBombFlag = (cell: Cell): boolean => cell === Cell.bombflagged;\n\nexport const initBoard = (w: number, h: number) => Array(w * h).fill(Cell.blank)\n\nexport const revealBoardOnDeath = (oldBoard: Cell[], mineField: Field[], deathIndex: number): Cell[] => {\n  const newBoard = [...oldBoard];\n  for (let i = 0; i < oldBoard.length; ++ i) {\n    const cell = oldBoard[i];\n    const f = mineField[i];\n    if (isNumber(cell)) {\n      continue;\n    }\n    if (isBlank(cell)) {\n      if (isBomb(f)) {\n        newBoard[i] = deathIndex === i ? Cell.bombdeath : Cell.bombrevealed;\n      }\n    }\n    if (isBombFlag(cell)) {\n      newBoard[i] = isBomb(f) ? Cell.bombflagged : Cell.bombmisflagged;\n    }\n  }\n  return newBoard;\n}\n\nexport const revealBoardOnWin = (oldBoard: Cell[], mineField: Field[]): Cell[] => {\n  const newBoard = [...oldBoard]\n  for (let i = 0; i < oldBoard.length; ++ i) {\n    const cell = oldBoard[i]\n    const f = mineField[i]\n    if (isNumber(cell)) {\n      continue\n    }\n    if (isBlank(cell)) {\n      if (isBomb(f)) {\n        newBoard[i] = Cell.bombflagged\n      }\n    }\n  }\n  return newBoard\n}\n\nexport const getNeighbourIndexes = (i: number, w: number, size: number): Array<number> => {\n  const neighbourIndexes = [];\n  const isFirstColumn = i % w === 0;\n  const isLastColumn = i % w === w - 1;\n  const isFirstRow = i < w;\n  const isLastRow = i + w >= size;\n  if (!isFirstColumn) neighbourIndexes.push(i - 1);\n  if (!isLastColumn) neighbourIndexes.push(i + 1);\n  if (!isFirstRow) {\n    neighbourIndexes.push(i - w);\n    if (!isFirstColumn) neighbourIndexes.push(i - w - 1);\n    if (!isLastColumn) neighbourIndexes.push(i - w + 1);\n  }\n  if (!isLastRow) {\n    neighbourIndexes.push(i + w);\n    if (!isFirstColumn) neighbourIndexes.push(i + w - 1);\n    if (!isLastColumn) neighbourIndexes.push(i + w + 1);\n  }\n  return neighbourIndexes;\n}\n\nexport const revealBoardOnClick = (board: Cell[], mineField: Field[], i: number, w: number) => {\n  let newBoard = [...board];\n  const field = mineField[i];\n  if (field === '1') { newBoard[i] = Cell.open1; return newBoard; }\n  if (field === '2') { newBoard[i] = Cell.open2; return newBoard; }\n  if (field === '3') { newBoard[i] = Cell.open3; return newBoard; }\n  if (field === '4') { newBoard[i] = Cell.open4; return newBoard; }\n  if (field === '5') { newBoard[i] = Cell.open5; return newBoard; }\n  if (field === '6') { newBoard[i] = Cell.open6; return newBoard; }\n  if (field === '7') { newBoard[i] = Cell.open7; return newBoard; }\n  if (field === '8') { newBoard[i] = Cell.open8; return newBoard; }\n  if (field === '0') {\n    newBoard[i] = Cell.open0;\n    const neighbourIndexes = getNeighbourIndexes(i, w, board.length)\n      .filter(ni => isBlank(board[ni]) && isFieldNumber(mineField[ni]));\n    for (let i = 0; i < neighbourIndexes.length; ++i) {\n      newBoard = revealBoardOnClick(newBoard, mineField, neighbourIndexes[i], w);\n    }\n  }\n  return newBoard;\n}\n\nexport const isWin = (board: Cell[], mineField: Field[]) => {\n  for (let i = 0; i < board.length; ++i) {\n    const cell = board[i];\n    const field = mineField[i];\n    if ((isBlank(cell) && !isBomb(field)) || (isBombFlag(cell) && !isBomb(field))) {\n      return false;\n    }\n  }\n  return true;\n};\n","import { getNeighbourIndexes } from \"./Cell\";\nimport { getIndexFromCoordinates } from \"./Coordinate\";\n\nexport type Field = 'X' | 'x' | '0' | '1'  | '2'  | '3'  | '4'  | '5'  | '6'  | '7'  | '8';\n\nexport const isNumber = (f: Field) => f !== 'x' && f !== 'X';\nexport const isBomb = (f: Field) => f === 'x';\n\n\nconst shuffleArray = (array : Field[]) => {\n  var currentIndex = array.length, temporaryValue, randomIndex ;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nexport const initMineField = (width: number, height: number, x: number, y: number, cnt: number) => {\n  const mineFieldSize = width * height;\n  let mineField = Array(mineFieldSize);\n\n  mineField[getIndexFromCoordinates(x, y, width)] = 'X';\n  var minesArr = new Array(mineFieldSize - 1);\n  for (let i = 0; i < cnt; i++){\n    minesArr[i] = 'x';\n  }\n  minesArr = shuffleArray(minesArr);\n\n  for (let i = 0, m = 0; i < mineFieldSize; i++) {\n    if (mineField[i] !== 'X') {\n      mineField[i] = minesArr[m++];\n    }\n  }\n\n  for (let i = 0; i < mineFieldSize; ++i) {\n    if (mineField[i] !== 'x') {\n      const neighbourIndexes = getNeighbourIndexes(i, width, mineFieldSize);\n      const neighbourMines = neighbourIndexes.map(ni => mineField[ni] === 'x' ? 1 : 0);\n      const neighbourMinesCount = neighbourMines.reduce((acc: number, cur) => (acc + cur), 0);\n      mineField[i] = `${neighbourMinesCount}`;\n    }\n  }\n\n  return mineField;\n};\n","export enum MouseKey {\n  LEFT,\n  RIGHT,\n  MIDDLE,\n}\n\nexport interface MouseClickEvent {\n  key?: MouseKey;\n  target: string,\n}\n\nexport const getMouseKey = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n  if (e.nativeEvent.button === 0) {\n    return MouseKey.LEFT;\n  }\n  if (e.nativeEvent.button === 2) {\n    return MouseKey.RIGHT;\n  }\n  return MouseKey.MIDDLE\n};","export enum SmileyButton {\n  facesmile = 'facesmile',\n  facepressed = 'facepressed',\n  facewin = 'facewin',\n  facedead = 'facedead',\n  faceooh = 'faceooh',\n};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Cell } from '../model/Cell';\nimport { getMouseKey, MouseKey } from '../model/Mouse';\nimport { onCellBothClick, onCellLeftClick, onCellRightClick, onMouseDown, onMouseEnter, onMouseUp } from '../state/actions';\nimport { getCellStatus, isLeftDown, isLeftPressed, isNeighbourPressed, isRightDown } from '../state/selectors';\n\ninterface props {\n  x: number;\n  y: number;\n}\n\nconst CellComponent = ({ x, y } : props) => {\n  const key = `${x}_${y}`;\n  const dispatch = useDispatch();\n  let cellStatus = useSelector(getCellStatus(x, y));\n  const leftPressed = useSelector(isLeftPressed(key));\n  const rightDown = useSelector(isRightDown);\n  const leftDown = useSelector(isLeftDown);\n  const neighbourPressed = useSelector(isNeighbourPressed(key))\n  if (cellStatus === Cell.blank) {\n    if (leftPressed || (leftDown && rightDown && neighbourPressed)) {\n      cellStatus = Cell.pressed;\n    }\n  }\n  return (\n    <div\n      key={key}\n      className={`square ${cellStatus}`}\n      onContextMenu={e => {e.preventDefault();}}\n      onMouseDown={(e) => {\n        dispatch(onMouseDown({ key: getMouseKey(e), target: key }));\n        e.stopPropagation();\n      }}\n      onMouseUp={(e) => {\n        const mouseKey = getMouseKey(e);\n        dispatch(onMouseUp({ key: mouseKey, target: key }));\n        if (mouseKey === MouseKey.LEFT) {\n          if (rightDown) {\n            dispatch(onCellBothClick(x, y))\n          } else {\n            dispatch(onCellLeftClick(x, y));\n          }\n        } else if (mouseKey === MouseKey.RIGHT) {\n          if (leftDown) {\n            dispatch(onCellBothClick(x, y))\n          } else {\n            dispatch(onCellRightClick(x, y));\n          }\n        }\n        e.stopPropagation();\n      } }\n      onMouseOver={(e) => {\n        dispatch(onMouseEnter({ target: key }));\n        e.stopPropagation();\n      }}\n    />\n  ); \n}\nexport default CellComponent;\n","import { range } from 'lodash';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGameConfig } from '../state/selectors';\nimport Cell from './Cell';\n\nconst Board = () => {\n  const { height: h, width: w } = useSelector(getGameConfig);\n  const border =  (key: string) => (<div key={key} className=\"borderlr\" />);\n  var divs = [];\n  for (var y = 0; y < h; ++y) {\n    divs.push(border(`${y}-l`));\n    for (var x = 0; x < w; ++x){\n      divs.push(\n        <Cell\n          key={`${y}-${x}`}\n          x={x}\n          y={y}\n        />\n      );\n    }\n    divs.push(border(`${y}-r`));\n  }\n  const line = range(w).map(i => <div key={i} className=\"bordertb\" />);\n  return (\n    <div className=\"minesweeper-board\" >\n      {divs}\n      <div className=\"borderbl\" />{line}<div className=\"borderbr\" />\t\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\n\ninterface props {\n\tid: string;\n\tvalue: number,\n};\n\nconst getNthDigit = (value: number, n: number) => {\n  if (n === 1 && value < 0){\n    return \"-\";\n  }\n  var pow = Math.pow(10, 3 - n);\n  var ret = Math.floor((Math.abs(value) / pow) % 10);\n  return Math.abs(ret);\n}\n\nconst ThreeDigitCounter = ({ id, value } : props) => (\n\t<div style={{'backgroundImage':'none'}}>\n\t\t<div className={`time${getNthDigit(value, 1)}`} id={id+\"_hundreds\"} />\n\t\t<div className={`time${getNthDigit(value, 2)}`} id={id+\"_tens\"} />\n\t\t<div className={`time${getNthDigit(value, 3)}`} id={id+\"_ones\"} />\n\t</div>\n);\n\nexport default ThreeDigitCounter;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGameConfig, getSmileyButton } from '../state/selectors';\nimport { onSmileyClick, setSmileyButton } from '../state/actions';\nimport { includes } from 'lodash';\nimport { GameConfig } from '../model/Game';\nimport { SmileyButton } from '../model/Smiley';\n\nconst getStyles = (config: GameConfig) => {\n  const w = config.width;\n  const margin = (w * 16 - 90 - 26) / 2;\n  return {\n    \"marginLeft\": `${margin}px`,\n    \"marginRight\": `${margin}px`,\n    \"marginTop\": \"3px\",\n    \"marginBottom\": \"3px\"\n  };\n}\n\nconst Smiley = () => {\n  const config = useSelector(getGameConfig);\n  const smiley = useSelector(getSmileyButton);\n  const dispatch = useDispatch();\n  return (\n    <div style={{'backgroundImage':'none'}}>\n      <div id=\"smiley\"\n        className={smiley} style={getStyles(config)}\n        onMouseDown={() => {\n          dispatch(setSmileyButton(SmileyButton.facepressed));\n        }}\n        onMouseUp={() => {\n          if (smiley === SmileyButton.facepressed){\n            dispatch(onSmileyClick());\n            dispatch(setSmileyButton(SmileyButton.facesmile));\n          }\n        }}\n        onMouseOut={() => {\n          const ignoreStates = [SmileyButton.facewin, SmileyButton.facedead, SmileyButton.facesmile];\n          if (!includes(ignoreStates, smiley)) {\n            dispatch(setSmileyButton(SmileyButton.facesmile));\n          }\n        }}\n      />\n    </div>\n  );\n}\nexport default Smiley;\n","import React, { useEffect, useRef } from 'react';\nimport { range } from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGameConfig, getMinesCounter, getTimeCounter, isClockRunning } from '../state/selectors';\nimport ThreeDigitCounter from './ThreeDigitCounter';\nimport SmileyButton from './SmileyButton';\nimport { clockTick } from '../state/actions';\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const config = useSelector(getGameConfig);\n  const minesCounter = useSelector(getMinesCounter);\n  const timeCounter = useSelector(getTimeCounter);\n  const clockRunning = useSelector(isClockRunning);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  useEffect(() => {\n    if (clockRunning) {\n      intervalRef.current = setInterval(() => { dispatch(clockTick()); }, 1000);\n    } else  if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n  }, [clockRunning, dispatch])\n  const line = range(config.width).map(key => <div key={key} className=\"bordertb\" />);\n  return (\n    <div className=\"msw-header\">\n      <div className=\"bordertl\" />{line}<div className=\"bordertr\" />\n      <div className=\"borderlrlong\"/>\n      <ThreeDigitCounter value={minesCounter} id=\"mines\" />\n      <SmileyButton />\n      <ThreeDigitCounter value={timeCounter} id=\"seconds\"/>\n      <div className=\"borderlrlong\"/>\n      <div className=\"borderjointl\" />{line}<div className=\"borderjointr\" />\n    </div>\n  );\n}\nexport default Header;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { GameConfig } from '../model/Game';\nimport { getGameConfig } from '../state/selectors';\nimport Board from './Board';\nimport Header from './Header';\n\nconst BORDER_WIDTH = 10;\nconst BORDER_HEIGHT = 10;\nconst FIELD_WIDTH = 16;\nconst FIELD_HEIGHT = 16;\nconst HEADER_HEIGHT = 32;\n\nconst calcStyle = (config: GameConfig) => {\n  const widthFieldsNum = config.width;\n  const heightFieldsNum = config.height;\n  const width = 2 * BORDER_WIDTH + widthFieldsNum * FIELD_WIDTH;\n  const height = 3 * BORDER_HEIGHT + FIELD_HEIGHT * heightFieldsNum + HEADER_HEIGHT;\n  return { width, height };\n}\n\nconst Game = () => {\n  const config = useSelector(getGameConfig);\n  return (\n    <div id=\"game\" className=\"msw\" style={calcStyle(config)}>\n      <Header />\n      <Board />\t\t\t\t\t\t\n    </div>\n  );\n}\nexport default Game;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { onMouseEnter } from '../state/actions';\nimport DificultySelector from './DifficultySelector';\nimport Game from './Game';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  return (\n    <div\n      className=\"APP z100\"\n      onMouseOver={(e) => dispatch(onMouseEnter({ target: 'APP' }))}\n    >\n      <DificultySelector />\n      <Game />\n    </div>\n  );\n}\nexport default App;\n","import { PayloadAction } from \"typesafe-actions\";\nimport { Cell, getNeighbourIndexes, isBlank, isBombFlag, isNumber, isWin, revealBoardOnClick, revealBoardOnDeath, revealBoardOnWin } from \"../model/Cell\";\nimport { Coordinate, getIndexFromCoordinates } from \"../model/Coordinate\";\nimport { initMineField, isBomb } from \"../model/Field\";\nimport { SmileyButton } from \"../model/Smiley\";\nimport { getGameConfig, getWidth } from \"./selectors\";\nimport { RootState } from \"./store\";\n\nconst handleLeftClickForIndex = (state: RootState, index: number) => {\n  const { board, mineField } = state;\n  const w = getWidth(state);\n  const cell = board[index];\n  if (!mineField || !isBlank(cell)) {\n    return state;\n  }\n  const field = mineField[index];\n  if (isBomb(field)) {\n    return ({\n      ...state,\n      clockRunning: false,\n      gameEnded: true,\n      board: revealBoardOnDeath(board, mineField, index),\n      smileyButton: SmileyButton.facedead,\n    });\n  }\n  const newBoard = revealBoardOnClick(board, mineField, index, w);\n  const win = isWin(newBoard, mineField);\n  const winBoard = revealBoardOnWin(newBoard, mineField)\n  return ({\n    ...state,\n    board: win ? winBoard : newBoard,\n    gameEnded: win,\n    clockRunning: !win,\n    smileyButton: win ? SmileyButton.facewin : SmileyButton.facesmile,\n  });\n}\n\nexport const handleLeftClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { gameEnded, gameStarted, board } = state;\n  const {\n    width: w,\n    height: h,\n    mines,\n  } = getGameConfig(state);\n  if (gameEnded) {\n    return state;\n  }\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  if (!gameStarted) {\n    const newMineField = initMineField(w, h, x, y, mines);\n    const newBoard = revealBoardOnClick(board, newMineField, index, w);\n    return ({\n      ...state,\n      gameStarted: true,\n      mineField: newMineField,\n      clockRunning: true,\n      board: newBoard,\n    })\n  }\n  return handleLeftClickForIndex(state, index);\n};\n\nexport const handleRightClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { board, minesCounter, gameEnded } = state;\n  if (gameEnded) {\n    return state;\n  }\n  const {\n    width: w,\n   } = getGameConfig(state);\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  const cell = board[index];\n  if (isBlank(cell)) {\n    const newBoard = [...board];\n    newBoard[index] = Cell.bombflagged;\n    return ({\n      ...state,\n      board: newBoard,\n      minesCounter: minesCounter - 1,\n    });\n  }\n  if (isBombFlag(cell)) {\n    const newBoard = [...board];\n    newBoard[index] = Cell.blank;\n    return ({\n      ...state,\n      board: newBoard,\n      minesCounter: minesCounter + 1,\n    });\n  }\n  return state;\n};\n\nexport const handleBothClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { board, mineField, gameEnded } = state;\n  if (gameEnded) {\n    return state;\n  }\n  const {\n    width: w,\n   } = getGameConfig(state);\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  const cell = board[index];\n  if (!mineField) {\n    return state;\n  }\n  if (isNumber(cell)) {\n    const neighbourIndexes = getNeighbourIndexes(index, w, board.length);\n    let nextState = {...state};\n    for (let i = 0; i < neighbourIndexes.length; ++i) {\n      const ni = neighbourIndexes[i];\n      nextState = handleLeftClickForIndex(nextState, ni);\n    }\n    return nextState;\n  }\n  return state;\n};","import { createReducer, PayloadAction } from 'typesafe-actions';\nimport { initBoard } from '../model/Cell';\nimport { DifficultyOption, DIFFICULTY_OPTIONS } from '../model/Game';\nimport { MouseKey, MouseClickEvent } from '../model/Mouse';\nimport { SmileyButton } from '../model/Smiley';\nimport {\n  SET_DIFFICULTY,\n  SET_MINES_COUNTER,\n  SET_TIME_COUNTER,\n  SET_SMILEY_BUTTON,\n  ON_MOUSE_DOWN,\n  ON_MOUSE_UP,\n  ON_MOUSE_ENTER,\n  CLOCK_TICK,\n  CELL_LEFT_CLICK,\n  CELL_RIGHT_CLICK,\n  SMILEY_CLICK,\n  CELL_BOTH_CLICK,\n} from './actions';\nimport { handleBothClick, handleLeftClick, handleRightClick } from './gameHelpers';\nimport { RootState } from './store';\n\nconst getInitialState = (difficulty = DIFFICULTY_OPTIONS[2]) => ({\n  difficulty,\n  minesCounter: difficulty.config.mines,\n  timeCounter: 0,\n  smileyButton: SmileyButton.facesmile,\n  board: initBoard(difficulty.config.width, difficulty.config.height),\n  mineField: undefined,\n  mouseLeft: undefined,\n  mouseMiddle: undefined,\n  mouseRight: undefined,\n  clockRunning: false,\n  gameStarted: false,\n  gameEnded: false,\n});\n\nconst reducer = createReducer<RootState>(getInitialState())\n  .handleType(SET_DIFFICULTY, (state: RootState, action: PayloadAction<string, DifficultyOption>) => (\n    getInitialState(action.payload)\n  ))\n  .handleType(SET_MINES_COUNTER, (state: RootState, action: PayloadAction<string, number>) => ({\n    ...state,\n    minesCounter: action.payload, \n  }))\n  .handleType(SET_TIME_COUNTER, (state: RootState, action: PayloadAction<string, number>) => ({\n    ...state,\n    timeCounter: action.payload, \n  }))\n  .handleType(SET_SMILEY_BUTTON, (state: RootState, action: PayloadAction<string, SmileyButton>) => ({\n    ...state,\n    smileyButton: action.payload, \n  }))\n  .handleType(ON_MOUSE_DOWN, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.gameEnded) return state;\n    if (action.payload.key === MouseKey.LEFT) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n        smileyButton: SmileyButton.faceooh,\n      });\n    }\n    if (action.payload.key === MouseKey.MIDDLE) {\n      return ({\n        ...state,\n        mouseMiddle: action.payload.target,\n        smileyButton: SmileyButton.faceooh,\n      });\n    }\n    if (action.payload.key === MouseKey.RIGHT) {\n      return ({\n        ...state,\n        mouseRight: action.payload.target,\n      });\n    }\n    return state;\n  })\n  .handleType(ON_MOUSE_UP, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.gameEnded) return state;\n    if (action.payload.key === MouseKey.LEFT) {\n      return ({\n        ...state,\n        mouseLeft: undefined,\n        smileyButton: state.mouseRight ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    if (action.payload.key === MouseKey.MIDDLE) {\n      return ({\n        ...state,\n        mouseMiddle: undefined,\n        smileyButton: (state.mouseRight || state.mouseLeft) ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    if (action.payload.key === MouseKey.RIGHT) {\n      return ({\n        ...state,\n        mouseRight: undefined,\n        smileyButton: state.mouseLeft ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    return state;\n  })\n  .handleType(ON_MOUSE_ENTER, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.mouseLeft !== undefined && state.mouseRight !== undefined) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n        mouseRight: action.payload.target,\n      });\n    }\n    if (state.mouseLeft !== undefined) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n      });\n    }\n    if (state.mouseMiddle !== undefined) {\n      return ({\n        ...state,\n        mouseMiddle: action.payload.target,\n      });\n    }\n    if (state.mouseRight !== undefined) {\n      return ({\n        ...state,\n        mouseRight: action.payload.target,\n      });\n    }\n    return state;\n  })\n  .handleType(CELL_LEFT_CLICK, handleLeftClick)\n  .handleType(CELL_RIGHT_CLICK, handleRightClick)\n  .handleType(CELL_BOTH_CLICK, handleBothClick)\n  .handleType(SMILEY_CLICK, (state: RootState) => (\n    getInitialState(state.difficulty)\n  ))\n  .handleType(CLOCK_TICK, (state: RootState) => ({\n    ...state,\n    timeCounter: state.timeCounter + 1,\n  }));\n\n  \nexport default reducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Cell } from '../model/Cell';\nimport { Field } from '../model/Field';\nimport { DifficultyOption } from '../model/Game';\nimport { SmileyButton } from '../model/Smiley';\nimport reducer from './reducer';\n\n\nexport type RootState = {\n  difficulty: DifficultyOption,\n  minesCounter: number,\n  timeCounter: number,\n  smileyButton: SmileyButton,\n  board: Cell[],\n  mineField: Field[] | undefined,\n  mouseLeft: string | undefined,\n  mouseMiddle: string | undefined,\n  mouseRight: string | undefined,\n  clockRunning: boolean,\n  gameStarted: boolean,\n  gameEnded: boolean,\n};\n\nexport default createStore(reducer, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './state/store';\nimport './css/minesweeper.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div className=\"Screen\">\n        <App />\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}